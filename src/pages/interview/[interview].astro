---
import { getInterviewFolders, getInterviewQuestions, getInterviewMetadata, getQuestionMetadata } from '../../utils/contentUtils';
import '../../styles/global.css';

export async function getStaticPaths() {
  const interviewFolders = await getInterviewFolders();
  
  return interviewFolders.map((folder) => ({
    params: { interview: folder }
  }));
}

const { interview } = Astro.params;

// Load interview metadata
const interviewMetadata = await getInterviewMetadata(interview);

// Get all questions for this interview
const questions = await getInterviewQuestions(interview);

// Load metadata for each question
const questionsWithMetadata = await Promise.all(
  questions.map(async (questionFolder) => {
    const metadata = await getQuestionMetadata(interview, questionFolder);
    return metadata ? { folder: questionFolder, ...metadata } : { 
      folder: questionFolder, 
      question: 'Question unavailable', 
      responseType: 'unknown' as const,
      artist: 'Unknown',
      interviewNumber: 0,
      questionNumber: 0
    };
  })
);

if (!interviewMetadata) {
  return Astro.redirect('/404');
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{interviewMetadata.artistName} - {interviewMetadata.interviewTitle}</title>
    <meta name="description" content={`Interview with ${interviewMetadata.artistName}: ${interviewMetadata.description || interviewMetadata.interviewTitle}`} />
  </head>
  <body>
    <nav class="breadcrumb">
      <a href="/">‚Üê Back to all artists</a>
    </nav>
    
    <main class="interview-container">
      <div class="questions-side">
        <div class="questions-grid">
          {questionsWithMetadata.map((question, index) => (
            <a 
              href={`#question-${index + 1}`}
              class="question-card"
              aria-label={`Question ${index + 1}: ${question.question}`}
              key={question.folder}
            >
              <div class="card-number">Q{index + 1}</div>
              <div class="card-content">
                <h3 class="card-question">{question.question}</h3>
                <span class="card-type">{question.responseType}</span>
              </div>
            </a>
          ))}
        </div>
      </div>
      
      <div class="answer-side">
        <header class="artist-info">
          <h3 class="artist-name">{interviewMetadata.artistName}</h3>
          <p class="interview-title">{interviewMetadata.interviewTitle}</p>
        </header>
        
        <div class="questions-scroll-container">
          {questionsWithMetadata.map((question, index) => (
            <section class="question-section" id={`question-${index + 1}`} key={question.folder}>
              <div class="question-display">
                <div class="question-number-display">Q{index + 1}</div>
                <h2 class="question-text-display">{question.question}</h2>
                <span class="response-type-display">{question.responseType}</span>
              </div>
              
              <div class="response-container">
                <div class="response-placeholder">
                  <div class="placeholder-icon">üé®</div>
                  <h4>{question.responseType} Response</h4>
                  <p>Response content would appear here</p>
                </div>
              </div>
            </section>
          ))}
        </div>
      </div>
      
    </main>
    
    <style>
      body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: var(--color-warm-white);
        overflow-x: hidden;
      }
      
      .breadcrumb {
        position: fixed;
        top: var(--space-lg);
        left: var(--space-lg);
        z-index: 100;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: var(--border-radius);
        padding: var(--space-sm) var(--space-md);
      }
      
      .breadcrumb a {
        color: var(--color-charcoal);
        text-decoration: none;
        font-size: 0.9rem;
        letter-spacing: 1pt;
        display: inline-flex;
        align-items: center;
        gap: var(--space-sm);
        transition: all var(--transition-medium);
      }
      
      .breadcrumb a:hover {
        color: #dc2626;
      }
      
      .interview-container {
        width: 100%;
        height: 100vh;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0;
        overflow: hidden;
      }
      
      .questions-side {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--space-3xl);
      }
      
      .questions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: var(--space-lg);
        max-width: 600px;
        width: 100%;
      }
      
      .question-card {
        background: rgba(255, 255, 255, 0.1);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--border-radius-lg);
        padding: var(--space-lg);
        cursor: pointer;
        transition: all var(--transition-medium);
        color: var(--color-warm-white);
        text-align: left;
        display: flex;
        flex-direction: column;
        gap: var(--space-md);
        min-height: 120px;
        position: relative;
        overflow: hidden;
        font-family: inherit;
        width: 100%;
        box-sizing: border-box;
        text-decoration: none;
      }
      
      .question-card:focus {
        outline: 2px solid rgba(255, 255, 255, 0.6);
        outline-offset: 2px;
      }
      
      .question-card:hover {
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.4);
        transform: translateY(-2px);
      }
      
      .question-card.active {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.6);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      }
      
      .card-number {
        width: 2.5rem;
        height: 2.5rem;
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: var(--color-warm-white);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: "Times New Roman", Times, serif;
        font-weight: bold;
        font-size: 1rem;
        flex-shrink: 0;
      }
      
      .card-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
      }
      
      .card-question {
        font-family: "Times New Roman", Times, serif;
        font-size: 1rem;
        font-weight: 600;
        letter-spacing: -0.02em;
        color: var(--color-warm-white);
        margin: 0;
        line-height: 1.3;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
      
      .card-type {
        background: rgba(255, 255, 255, 0.2);
        color: var(--color-warm-white);
        padding: var(--space-xs) var(--space-sm);
        border-radius: 15px;
        font-size: 0.8rem;
        letter-spacing: 1pt;
        text-transform: capitalize;
        font-weight: 400;
        align-self: flex-start;
        border: 1px solid rgba(255, 255, 255, 0.2);
      }
      
      .answer-side {
        background: linear-gradient(135deg, var(--color-warm-white) 0%, var(--color-cream) 100%);
        position: relative;
        display: flex;
        flex-direction: column;
        padding: var(--space-xl);
        height: 100vh;
        overflow: hidden;
      }
      
      .artist-info {
        text-align: center;
        margin-bottom: var(--space-lg);
        padding-bottom: var(--space-lg);
        border-bottom: 2px solid rgba(220, 38, 38, 0.1);
        flex-shrink: 0;
      }
      
      .artist-name {
        font-family: "Times New Roman", Times, serif;
        font-size: clamp(1.3rem, 3vw, 1.8rem);
        font-weight: 600;
        color: var(--color-charcoal);
        margin: 0 0 var(--space-sm) 0;
        letter-spacing: -0.02em;
      }
      
      .interview-title {
        font-family: Arial, sans-serif;
        font-size: 0.9rem;
        letter-spacing: 2pt;
        color: var(--color-charcoal);
        opacity: 0.7;
        margin: 0;
        font-style: italic;
      }
      
      .questions-scroll-container {
        flex: 1;
        overflow-y: auto;
        overflow-x: hidden;
        scroll-behavior: smooth;
        scroll-snap-type: y mandatory;
        height: 100%;
      }
      
      .question-section {
        min-height: calc(100vh - 200px);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        scroll-snap-align: start;
        padding: var(--space-3xl) var(--space-lg);
        gap: var(--space-xl);
        border-bottom: 1px solid rgba(220, 38, 38, 0.1);
      }
      
      .question-section:last-child {
        border-bottom: none;
      }
      
      .question-display {
        text-align: center;
        max-width: 600px;
        width: 100%;
      }
      
      .question-number-display {
        width: 4rem;
        height: 4rem;
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        color: var(--color-warm-white);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: "Times New Roman", Times, serif;
        font-weight: bold;
        font-size: 1.2rem;
        margin: 0 auto var(--space-lg) auto;
      }
      
      .question-text-display {
        font-family: "Times New Roman", Times, serif;
        font-size: clamp(1.3rem, 3vw, 1.8rem);
        font-weight: 600;
        letter-spacing: -0.02em;
        color: var(--color-charcoal);
        margin: 0 0 var(--space-md) 0;
        line-height: 1.3;
      }
      
      .response-type-display {
        background: rgba(220, 38, 38, 0.1);
        color: #dc2626;
        padding: var(--space-xs) var(--space-md);
        border-radius: 20px;
        font-family: Arial, sans-serif;
        font-size: 0.85rem;
        letter-spacing: 1pt;
        text-transform: capitalize;
        font-weight: 500;
      }
      
      .response-container {
        position: relative;
        max-width: 600px;
        width: 100%;
        border-radius: var(--border-radius-lg);
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
        text-align: center;
      }
      
      .response-placeholder {
        width: 100%;
        min-height: 300px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border: 2px dashed rgba(220, 38, 38, 0.2);
        color: var(--color-charcoal);
        text-align: center;
        padding: var(--space-2xl);
        gap: var(--space-md);
      }
      
      .placeholder-icon {
        font-size: 3rem;
        opacity: 0.6;
      }
      
      .response-placeholder h4 {
        font-family: "Times New Roman", Times, serif;
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        text-transform: capitalize;
      }
      
      .response-placeholder p {
        font-family: Arial, sans-serif;
        font-size: 0.9rem;
        opacity: 0.7;
        margin: 0;
        font-style: italic;
      }
      
      /* Responsive Design */
      @media (max-width: 768px) {
        .interview-container {
          grid-template-columns: 1fr;
          grid-template-rows: auto 1fr;
          height: auto;
          min-height: 100vh;
        }
        
        .questions-side {
          height: auto;
          min-height: 40vh;
          padding: var(--space-2xl);
        }
        
        .questions-grid {
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: var(--space-md);
        }
        
        .question-card {
          min-height: 100px;
          padding: var(--space-md);
        }
        
        .answer-side {
          padding: var(--space-2xl);
          height: auto;
          min-height: 60vh;
        }
        
        .artist-name {
          font-size: clamp(1.3rem, 5vw, 1.5rem);
        }
        
        .breadcrumb {
          position: relative;
          top: auto;
          left: auto;
          margin: var(--space-lg);
          margin-bottom: 0;
        }
        
        .response-image {
          max-height: 40vh;
        }
      }
      
      @media (max-width: 480px) {
        .questions-side,
        .answer-side {
          padding: var(--space-xl);
        }
        
        .questions-grid {
          grid-template-columns: 1fr;
          gap: var(--space-sm);
        }
        
        .question-card {
          min-height: 80px;
          padding: var(--space-sm);
        }
        
        .card-question {
          font-size: 0.9rem;
        }
        
        .response-image {
          max-height: 35vh;
        }
      }
    </style>
    
    <script>
      // Simple scroll behavior and entrance animations
      document.addEventListener('DOMContentLoaded', () => {
        console.log('üìñ Scroll-based interview interface loaded');
        
        // Add simple entrance animation with CSS
        const questionCards = document.querySelectorAll('.question-card');
        questionCards.forEach((card, index) => {
          card.style.opacity = '0';
          card.style.transform = 'translateY(20px)';
          setTimeout(() => {
            card.style.transition = 'all 0.6s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          }, index * 100);
        });
        
        // Add active state based on current scroll position (optional enhancement)
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const sectionId = entry.target.id;
              const questionNumber = sectionId.split('-')[1];
              
              // Update active card
              questionCards.forEach((card, index) => {
                card.classList.toggle('active', index + 1 == questionNumber);
              });
            }
          });
        }, {
          threshold: 0.5,
          rootMargin: '-10% 0px -10% 0px'
        });
        
        // Observe all question sections
        const questionSections = document.querySelectorAll('.question-section');
        questionSections.forEach(section => observer.observe(section));
      });
    </script>
  </body>
</html>