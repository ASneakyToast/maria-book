---
import { getInterviewFolders, getInterviewQuestions, getInterviewMetadata, getQuestionMetadata } from '../../utils/contentUtils';

export async function getStaticPaths() {
  const interviewFolders = await getInterviewFolders();
  
  return interviewFolders.map((folder) => ({
    params: { interview: folder }
  }));
}

const { interview } = Astro.params;

// Load interview metadata
const interviewMetadata = await getInterviewMetadata(interview);

// Get all questions for this interview
const questions = await getInterviewQuestions(interview);

// Load metadata for each question
const questionsWithMetadata = await Promise.all(
  questions.map(async (questionFolder) => {
    const metadata = await getQuestionMetadata(interview, questionFolder);
    return metadata ? { folder: questionFolder, ...metadata } : { 
      folder: questionFolder, 
      question: 'Question unavailable', 
      responseType: 'unknown' as const,
      artist: 'Unknown',
      interviewNumber: 0,
      questionNumber: 0
    };
  })
);

if (!interviewMetadata) {
  return Astro.redirect('/404');
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{interviewMetadata.artistName} - {interviewMetadata.interviewTitle}</title>
    <meta name="description" content={`Interview with ${interviewMetadata.artistName}: ${interviewMetadata.description || interviewMetadata.interviewTitle}`} />
    <link rel="stylesheet" href="/src/styles/global.css" />
  </head>
  <body>
    <nav class="breadcrumb">
      <a href="/">‚Üê Back to all artists</a>
    </nav>
    
    <main class="interview-container" 
          data-questions={JSON.stringify(questionsWithMetadata.map((q, index) => ({
            index,
            folder: q?.folder || `question-${index + 1}`,
            question: q?.question || 'Question unavailable',
            responseType: q?.responseType || 'unknown',
            artist: q?.artist || 'Unknown Artist'
          })))}
          data-interview={JSON.stringify({ interview, artistName: interviewMetadata.artistName })}>
      <div class="questions-side">
        <div class="questions-grid">
          {questionsWithMetadata.map((question, index) => (
            <button 
              type="button"
              class={`question-card ${index === 0 ? 'active' : ''}`}
              data-question-index={index}
              data-question-folder={question.folder}
              tabindex="0"
              aria-label={`Question ${index + 1}: ${question.question}`}
              key={question.folder}
            >
              <div class="card-number">Q{index + 1}</div>
              <div class="card-content">
                <h3 class="card-question">{question.question}</h3>
                <span class="card-type">{question.responseType}</span>
              </div>
            </button>
          ))}
        </div>
      </div>
      
      <div class="answer-side">
        <div class="answer-content">
          <header class="artist-info">
            <h3 class="artist-name">{interviewMetadata.artistName}</h3>
            <p class="interview-title">{interviewMetadata.interviewTitle}</p>
          </header>
          
          <div class="current-question">
            <div class="question-display">
              <div class="question-number-display">Q1</div>
              <h2 class="question-text-display">{questionsWithMetadata[0]?.question}</h2>
            </div>
            
            <div class="response-container">
              <img 
                id="response-image"
                src={`/interviews/${interview}/${questionsWithMetadata[0]?.folder}/response.svg`} 
                alt={`${interviewMetadata.artistName}'s response`}
                class="response-image"
                loading="lazy"
                onerror={`this.src='/interviews/${interview}/${questionsWithMetadata[0]?.folder}/response.jpg'`}
              />
            </div>
          </div>
        </div>
      </div>
      
    </main>
    
    <style>
      body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: var(--color-warm-white);
        overflow-x: hidden;
      }
      
      .breadcrumb {
        position: fixed;
        top: var(--space-lg);
        left: var(--space-lg);
        z-index: 100;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: var(--border-radius);
        padding: var(--space-sm) var(--space-md);
      }
      
      .breadcrumb a {
        color: var(--color-charcoal);
        text-decoration: none;
        font-size: 0.9rem;
        letter-spacing: 1pt;
        display: inline-flex;
        align-items: center;
        gap: var(--space-sm);
        transition: all var(--transition-medium);
      }
      
      .breadcrumb a:hover {
        color: #dc2626;
      }
      
      .interview-container {
        width: 100%;
        height: 100vh;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0;
        overflow: hidden;
      }
      
      .questions-side {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--space-3xl);
      }
      
      .questions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: var(--space-lg);
        max-width: 600px;
        width: 100%;
      }
      
      .question-card {
        all: unset;
        background: rgba(255, 255, 255, 0.1);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--border-radius-lg);
        padding: var(--space-lg);
        cursor: pointer;
        transition: all var(--transition-medium);
        color: var(--color-warm-white);
        text-align: left;
        display: flex;
        flex-direction: column;
        gap: var(--space-md);
        min-height: 120px;
        position: relative;
        overflow: hidden;
        font-family: inherit;
        width: 100%;
        box-sizing: border-box;
      }
      
      .question-card:focus {
        outline: 2px solid rgba(255, 255, 255, 0.6);
        outline-offset: 2px;
      }
      
      .question-card:hover {
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.4);
        transform: translateY(-2px);
      }
      
      .question-card.active {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.6);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      }
      
      .card-number {
        width: 2.5rem;
        height: 2.5rem;
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: var(--color-warm-white);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: "Times New Roman", Times, serif;
        font-weight: bold;
        font-size: 1rem;
        flex-shrink: 0;
      }
      
      .card-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
      }
      
      .card-question {
        font-family: "Times New Roman", Times, serif;
        font-size: 1rem;
        font-weight: 600;
        letter-spacing: -0.02em;
        color: var(--color-warm-white);
        margin: 0;
        line-height: 1.3;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
      
      .card-type {
        background: rgba(255, 255, 255, 0.2);
        color: var(--color-warm-white);
        padding: var(--space-xs) var(--space-sm);
        border-radius: 15px;
        font-size: 0.8rem;
        letter-spacing: 1pt;
        text-transform: capitalize;
        font-weight: 400;
        align-self: flex-start;
        border: 1px solid rgba(255, 255, 255, 0.2);
      }
      
      .answer-side {
        background: linear-gradient(135deg, var(--color-warm-white) 0%, var(--color-cream) 100%);
        position: relative;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        padding: var(--space-3xl);
      }
      
      .answer-content {
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        height: 100%;
      }
      
      .artist-info {
        text-align: center;
        margin-bottom: var(--space-xl);
        padding-bottom: var(--space-lg);
        border-bottom: 2px solid rgba(220, 38, 38, 0.1);
      }
      
      .artist-name {
        font-family: "Times New Roman", Times, serif;
        font-size: clamp(1.5rem, 3vw, 2rem);
        font-weight: 600;
        color: var(--color-charcoal);
        margin: 0 0 var(--space-sm) 0;
        letter-spacing: -0.02em;
      }
      
      .interview-title {
        font-family: Arial, sans-serif;
        font-size: 0.9rem;
        letter-spacing: 2pt;
        color: var(--color-charcoal);
        opacity: 0.7;
        margin: 0;
        font-style: italic;
      }
      
      .current-question {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--space-xl);
      }
      
      .question-display {
        text-align: center;
      }
      
      .question-number-display {
        width: 4rem;
        height: 4rem;
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        color: var(--color-warm-white);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: "Times New Roman", Times, serif;
        font-weight: bold;
        font-size: 1.2rem;
        margin: 0 auto var(--space-lg) auto;
      }
      
      .question-text-display {
        font-family: "Times New Roman", Times, serif;
        font-size: clamp(1.3rem, 3vw, 1.8rem);
        font-weight: 600;
        letter-spacing: -0.02em;
        color: var(--color-charcoal);
        margin: 0;
        line-height: 1.3;
      }
      
      .response-container {
        position: relative;
        max-width: 100%;
        border-radius: var(--border-radius-lg);
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
        text-align: center;
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .response-image {
        width: 100%;
        height: auto;
        display: block;
        max-height: 50vh;
        object-fit: contain;
        transition: all var(--transition-medium);
        opacity: 1;
      }
      
      .response-image:hover {
        transform: scale(1.02);
      }
      
      .response-image.loading {
        opacity: 0.5;
        transform: scale(0.95);
      }
      
      /* Responsive Design */
      @media (max-width: 768px) {
        .interview-container {
          grid-template-columns: 1fr;
          grid-template-rows: auto 1fr;
          height: auto;
          min-height: 100vh;
        }
        
        .questions-side {
          height: auto;
          min-height: 40vh;
          padding: var(--space-2xl);
        }
        
        .questions-grid {
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: var(--space-md);
        }
        
        .question-card {
          min-height: 100px;
          padding: var(--space-md);
        }
        
        .answer-side {
          padding: var(--space-2xl);
          height: auto;
          min-height: 60vh;
        }
        
        .artist-name {
          font-size: clamp(1.3rem, 5vw, 1.5rem);
        }
        
        .breadcrumb {
          position: relative;
          top: auto;
          left: auto;
          margin: var(--space-lg);
          margin-bottom: 0;
        }
        
        .response-image {
          max-height: 40vh;
        }
      }
      
      @media (max-width: 480px) {
        .questions-side,
        .answer-side {
          padding: var(--space-xl);
        }
        
        .questions-grid {
          grid-template-columns: 1fr;
          gap: var(--space-sm);
        }
        
        .question-card {
          min-height: 80px;
          padding: var(--space-sm);
        }
        
        .card-question {
          font-size: 0.9rem;
        }
        
        .response-image {
          max-height: 35vh;
        }
      }
    </style>
    
    <script>
      // Add entrance animation using anime.js
      import * as anime from 'animejs';
      
      document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM loaded, initializing interview interface...');
        
        // Get data from data attributes with error handling
        let questionsData, interviewData;
        
        try {
          const container = document.querySelector('.interview-container');
          const questionsRaw = container.dataset.questions;
          console.log('Raw questions JSON:', questionsRaw);
          questionsData = JSON.parse(questionsRaw);
        } catch (error) {
          console.error('Failed to parse questions data:', error);
          return; // Exit if we can't parse data
        }
        
        try {
          const container = document.querySelector('.interview-container');
          const interviewRaw = container.dataset.interview;
          console.log('Raw interview JSON:', interviewRaw);
          interviewData = JSON.parse(interviewRaw);
        } catch (error) {
          console.error('Failed to parse interview data:', error);
          return; // Exit if we can't parse data
        }
        
        console.log('Questions data:', questionsData);
        console.log('Interview data:', interviewData);
        
        let currentQuestionIndex = 0;
        
        // DOM elements
        const questionCards = document.querySelectorAll('.question-card');
        const questionNumberDisplay = document.querySelector('.question-number-display');
        const questionTextDisplay = document.querySelector('.question-text-display');
        const responseImage = document.getElementById('response-image');
        
        console.log('Found elements:', {
          questionCards: questionCards.length,
          questionNumberDisplay: !!questionNumberDisplay,
          questionTextDisplay: !!questionTextDisplay,
          responseImage: !!responseImage
        });
        
        // Update content function
        function updateContent(index) {
          console.log(`üîÑ updateContent called with index: ${index}`);
          const question = questionsData[index];
          
          if (!question) {
            console.error(`‚ùå No question found at index ${index}`);
            return;
          }
          
          console.log(`üìù Updating to question:`, question);
          
          // Check if elements exist
          console.log(`üîç DOM elements check:`, {
            questionNumberDisplay: !!questionNumberDisplay,
            questionTextDisplay: !!questionTextDisplay,
            responseImage: !!responseImage
          });
          
          if (!questionNumberDisplay || !questionTextDisplay || !responseImage) {
            console.error(`‚ùå Missing DOM elements!`);
            return;
          }
          
          // Add loading state
          responseImage.classList.add('loading');
          console.log(`‚è≥ Added loading state to image`);
          
          // Update question display
          const newQuestionNumber = `Q${index + 1}`;
          const newQuestionText = question.question;
          
          console.log(`üìù Updating question number: "${questionNumberDisplay.textContent}" ‚Üí "${newQuestionNumber}"`);
          console.log(`üìù Updating question text: "${questionTextDisplay.textContent}" ‚Üí "${newQuestionText}"`);
          
          questionNumberDisplay.textContent = newQuestionNumber;
          questionTextDisplay.textContent = newQuestionText;
          
          // Update image with fallback
          const svgSrc = `/interviews/${interviewData.interview}/${question.folder}/response.svg`;
          const jpgSrc = `/interviews/${interviewData.interview}/${question.folder}/response.jpg`;
          
          console.log(`üñºÔ∏è Updating image: "${responseImage.src}" ‚Üí "${svgSrc}"`);
          
          responseImage.src = svgSrc;
          responseImage.onerror = () => {
            console.log(`‚ö†Ô∏è SVG failed, trying JPG: ${jpgSrc}`);
            responseImage.src = jpgSrc;
          };
          
          // Remove loading state when image loads
          responseImage.onload = () => {
            console.log(`‚úÖ Image loaded successfully`);
            responseImage.classList.remove('loading');
          };
          
          // Update active card
          questionCards.forEach((card, i) => {
            card.classList.toggle('active', i === index);
          });
          
          console.log(`‚úÖ Updated active card to index ${index}`);
          currentQuestionIndex = index;
          console.log(`‚úÖ Content update complete!`);
        }
        
        // Add click handlers to question cards
        questionCards.forEach((card, index) => {
          console.log(`Adding click handler to card ${index}`);
          
          card.addEventListener('click', (e) => {
            console.log(`Card ${index} clicked!`);
            
            if (index !== currentQuestionIndex) {
              console.log(`Switching from question ${currentQuestionIndex} to ${index}`);
              // Direct content update without animations for now
              updateContent(index);
            }
          });
          
          // Add keyboard navigation
          card.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              card.click();
            }
          });
        });
        
        // Keyboard navigation for arrow keys
        document.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft' && currentQuestionIndex > 0) {
            e.preventDefault();
            questionCards[currentQuestionIndex - 1].click();
          } else if (e.key === 'ArrowRight' && currentQuestionIndex < questionsData.length - 1) {
            e.preventDefault();
            questionCards[currentQuestionIndex + 1].click();
          } else if (e.key >= '1' && e.key <= '9') {
            const index = parseInt(e.key) - 1;
            if (index < questionsData.length) {
              e.preventDefault();
              questionCards[index].click();
            }
          }
        });
        
        // Initial animations
        anime.default({
          targets: '.question-card',
          translateY: [30, 0],
          opacity: [0, 1],
          delay: anime.default.stagger(100),
          duration: 600,
          easing: 'easeOutExpo'
        });
        
        anime.default({
          targets: '.answer-content',
          translateX: [50, 0],
          opacity: [0, 1],
          duration: 800,
          easing: 'easeOutExpo',
          delay: 300
        });
      });
    </script>
  </body>
</html>